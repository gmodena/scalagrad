/*
 * This Scala Testsuite was generated by the Gradle 'init' task.
 */
package scalagrad

import org.junit.runner.RunWith
import org.scalatest.funsuite.AnyFunSuite
import org.scalatestplus.junit.JUnitRunner

@RunWith(classOf[JUnitRunner])
class VarSuite extends ScalagradSuite{
  test("Derivation via chain rule") {
    val x = Var(0.5)
    val y = Var(4.2)
    val z = x * y

    z.backward()

    assert( Math.abs(z.value - 2.1) <= tol )
    assert( Math.abs(z.grad - 1) <= tol )
    assert( Math.abs(x.grad - 4.2) <= tol)
    assert( Math.abs(y.grad - 0.5) <= tol)
    assert( Math.abs(x.value - 0.5) <= tol)
    assert( Math.abs(y.value - 4.2) <= tol)
  }

  test("Basic derivation via chain rule (part 2)") {
    // Replicate tests from https://rufflewind.com/2016-12-30/reverse-mode-automatic-differentiation
    val x = Var(0.5)
    val y = Var(4.2)
    val z = x * y + sin(x)

    z.backward()

    assert(Math.abs(z.value - 2.579425538604203) <= tol)
    assert(Math.abs(x.grad - (y.value + Math.cos(x.value)) ) <= tol)
    assert(Math.abs(y.grad - x.value) <= tol)
  }
}
